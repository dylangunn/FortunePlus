package me.dylangunn.fortuneplus;

import java.util.Map;
import java.util.Random;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.ExperienceOrb;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.inventory.ItemStack;

public class FortunePlusListener implements Listener {
	public FortunePlusListener()
	{
		
	}
	
	@EventHandler
	public void onBlockBreak(BlockBreakEvent event)
	{
		Block brokenBlock = event.getBlock();
		
		if (event.getPlayer() == null)
			return;
		
		ItemStack itemInHand = event.getPlayer().getInventory().getItemInMainHand();

		if (isValid(itemInHand.getType(), brokenBlock.getType()))
		{
			if (!event.getPlayer().hasPermission("fortuneplus." + brokenBlock.getType().name().toLowerCase()) )
				return;
			
			Map<Enchantment, Integer> enchantments = itemInHand.getEnchantments();
			if (enchantments.containsKey(Enchantment.LOOT_BONUS_BLOCKS))
			{
				event.setCancelled(true);

				int numDrops = getNumDrops(enchantments.get(Enchantment.LOOT_BONUS_BLOCKS));
										
				brokenBlock.getWorld().dropItemNaturally(brokenBlock.getLocation(), new ItemStack(getDropType(brokenBlock.getType()), numDrops));
				((ExperienceOrb)brokenBlock.getWorld().spawn(brokenBlock.getLocation(), ExperienceOrb.class)).setExperience(numDrops);
				brokenBlock.setType(Material.AIR);
			}
		}
	}
	
	private boolean isValid(Material pMat, Material bMat)
	{
		switch (bMat)
		{
			case IRON_ORE:
				return pMat == Material.STONE_PICKAXE || pMat == Material.IRON_PICKAXE || pMat == Material.DIAMOND_PICKAXE || pMat == Material.NETHERITE_PICKAXE;
			case GOLD_ORE:
				return pMat == Material.IRON_PICKAXE || pMat == Material.DIAMOND_PICKAXE || pMat == Material.NETHERITE_PICKAXE;

            default:
				return false;
		}
	}
	
	private int getNumDrops(int fortuneLevel)
	{
        Random numGen = new Random();
		int random = numGen.nextInt(99) + 1;
        int baseWeight = 200 / (fortuneLevel + 2);
        int levelWeight = (100 - baseWeight) / fortuneLevel;
        if (random > baseWeight) {
        	return ((int) ((random - baseWeight) / levelWeight) + 1);
        }
        return 1;
	}

	private Material getDropType(Material bMat)
	{
		switch (bMat)
		{
			case IRON_ORE:
				return Material.IRON_INGOT;
			case GOLD_ORE:
				return Material.GOLD_INGOT;
			default:
				return Material.COBBLESTONE;
		}
	}
}